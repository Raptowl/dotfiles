#!/bin/sh

################################################################
#
# clb
#   - clipboard manager
#
# written by raptowl on 2019/11/16
#
################################################################

################################################################
# preprocessing
################################################################

# initialize shell environment
set -u
umask 0022
LC_ALL=C
type command > /dev/null 2>&1 && type getconf > /dev/null 2>&1 &&
PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
UNIX_STD=2003
export LC_ALL PATH UNIX_STD

# load and define functions
. "$DOTFILES_DIR/lib/log_error.sh"

usage() {
  cat <<_EOT_ >&2
Usage: ${0##*/} [-h | --help] [-c | --copy] <operation> [file]

${0##*/} is a utility to manage the context of clipboard.
By this command, you can input byte sequence through stdin or a file,
output it to stdout, and clean up data on clipboard.

option:
  -h | --help: print out the usage to stderr
  -c | --copy: copy and print the data to stdout

<operation>
  input : read data from stdin or a file and store the data into the clipboard
  output: write data in the clipboard to stdout or a file
  clear : delete the data in the clipboard
_EOT_
  exit 1
}

################################################################
# argument parsing
################################################################

# print the usage and exit
case "$# ${1:-}" in
  '1 -h'|'1 --help')
    usage
    ;;
esac

# parse options
opt_writestdout=''
while :; do
  case "${1:-}" in
    -c|--copy)
      opt_writestdout='true'
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      log_error "invalid option: $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

if [ $# -gt 2 ]; then
  log_error 'invalid arguments'
  exit 1
fi

################################################################
# main routine
################################################################

# confirm whether the required commands exist
if type xsel > /dev/null 2>&1; then
  cmd_input='xsel -i -b'
  cmd_output='xsel -o -b'
  cmd_clear='xsel -c -b'
elif type xclip > /dev/null 2>&1; then
  cmd_input='xclip -i -selection "clipboard"'
  cmd_output='xclip -o -selection "clipboard"'
  cmd_clear='printf "" | xclip -i -selection "clipboard"'
elif type pbcopy > /dev/null 2>&1 && type pbpaste > /dev/null 2>&1; then
  cmd_input='pbcopy'
  cmd_output='pbpaste'
  cmd_clear='printf "" | pbcopy'
else
  log_error 'commands xsel, xclip, or pbcopy/pbpaste are not found'
  exit 1
fi

# execute the operation
case "${1:-} ${2:-}" in
  'input '|'input -')
    eval "$cmd_input"
    if [ -n "${opt_writestdout:-}" ]; then
      eval "$cmd_output"
    fi
    ;;
  'input '*)
    eval "$cmd_input" < "$2"
    if [ -n "${opt_writestdout:-}" ]; then
      eval "$cmd_output"
    fi
    ;;
  'output ')
    eval "$cmd_output"
    ;;
  'output '*)
    eval "$cmd_output" > "$2"
    if [ -n "${opt_writestdout:-}" ]; then
      eval "$cmd_output"
    fi
    ;;
  'clear ')
    eval "$cmd_clear"
    ;;
  ' ')
    log_error 'set any one of operations'
    exit 1
    ;;
  *)
    log_error "invalid operation: ${1:-} ${2:-}"
    exit 1
    ;;
esac

exit 0
