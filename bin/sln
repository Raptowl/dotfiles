#!/bin/sh
# >> parse_and_print_usage[description]
# Short description here ...
# ...
# << parse_and_print_usage[description]

################################################################
# preprocessing
################################################################

# initialize shell environment
set -u
umask 0022
LC_ALL=C
type command > /dev/null 2>&1 && type getconf > /dev/null 2>&1 &&
PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
UNIX_STD=2003
export LC_ALL PATH UNIX_STD

# load and define functions
#. "$DOTFILES_DIR/lib/log_error.sh"

# catch signals
#trap '' HUP INT QUIT TERM

################################################################
# argument parsing
################################################################

# print the usage and exit
case "$# ${1:-}" in
  '1 -h'|'1 --help')
    #parse_and_print_usage
    :
    ;;
esac

################################################################
# main routine
################################################################


# slb - select lines by numbers


tmpfile=$(mktemp "/tmp/tmp.${0##*/}.XXXXXXXXXX")
trap "rm -f ${tmpfile}" EXIT HUP INT QUIT TERM


# display lines to be able to choose
nl -b a -w 4 -s ':' > "$tmpfile"
cat "$tmpfile" > /dev/tty


# await the input of number to be chosen by the prompt
while :; do
  printf '> ' > /dev/tty
  read prompt_input < /dev/tty
  if [ "$prompt_input" = "" ]; then
    # if the input is a blank, output null to stdoud and exit with error code.
    printf ''
    exit 1
  else
    if sed -e 's/^  *//' "$tmpfile" \
         | grep -e "^${prompt_input}:" > /dev/null 2>&1
    then
      # if the input is a kind of number, output the appropriate value.
      sed -e 's/^  *//' "$tmpfile" \
        | grep -e "^${prompt_input}:" \
        | sed -e "s/^${prompt_input}://"
      break
    else
      # if the input is invalid, output message to stderr.
      printf 'ERROR: invalid input: %s\n' "$prompt_input" >&2
    fi
  fi
done


exit 0
