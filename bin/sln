#!/bin/sh
# >> __description__
# This command is an interactive filter to select lines by key-numbers.
# <<


######################################################################
# preprocessing
######################################################################


# load library functions
. "$DOTFILES_DIR/lib/init_env.sh"
. "$DOTFILES_DIR/lib/parse_usage.sh"
. "$DOTFILES_DIR/lib/log_error.sh"


# initialize shell environment
init_env


# parse options
# s: switch, no need any values (ex. -s)
# v: value, need to input some values (ex. -k abc)
# o: optional, no need to specify (e.g. [-s])
while :; do
  case "${1:-}" in
    -h|--help)  # >> __option__[so]:print out the usage to stderr
      parse_usage
      exit 0
      ;;
    --)  # >> __option__[so]
      shift
      break
      ;;
    -*)
      log_error "invalid option: $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done


######################################################################
# main routine
######################################################################


tmpfile=$(mktemp "/tmp/tmp.${0##*/}.XXXXXXXXXX")


# catch signals
trap 'rm -f '"$tmpfile"'' EXIT HUP INT QUIT TERM


# display lines to be able to choose
nl -b a -w 4 -s ':' > "$tmpfile"
cat "$tmpfile" > /dev/tty


# await the input of number to be chosen by the prompt
while :; do
  printf '> ' > /dev/tty
  read -r prompt_input < /dev/tty
  if [ "$prompt_input" = "" ]; then
    # if the input is a blank, output null to stdoud and exit with error code.
    printf ''
    exit 1
  else
    if sed -e 's/^  *//' "$tmpfile" \
         | grep -e "^${prompt_input}:" > /dev/null 2>&1; then
      # if the input is a kind of number, output the appropriate value.
      sed -e 's/^  *//' "$tmpfile" \
        | grep -e "^${prompt_input}:" \
        | sed -e "s/^${prompt_input}://"
      break
    else
      # if the input is invalid, output message to stderr.
      log_error "invalid input: $prompt_input"
    fi
  fi
done


exit 0
